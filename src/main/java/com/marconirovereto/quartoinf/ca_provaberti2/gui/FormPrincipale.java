/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.marconirovereto.quartoinf.ca_provaberti2.gui;

import static com.marconirovereto.quartoinf.ca_provaberti2.fantacalcio.Metodi.*;
import com.marconirovereto.quartoinf.ca_provaberti2.fantacalcio.Persona;
import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;



/**
 *
 * @author Nico
 */
public class FormPrincipale extends javax.swing.JFrame {

    //boolean per il debug, mostra informazioni utili in console
    boolean DEBUG = false;
    
    //contenitore per le persone della squadra selezionata
    Persona[]ArraySquadraSelez;
    
    //come sopra, contiene la key di che squadra è stata selezionata
    String s;
    
    //espressione lambda per confermare la chiusura, l'ho messa qui in caso la dovessi usare più volte
    Runnable askOnClose = ()-> {JFrame Frame = new JFrame("Exit"); 
                                if (JOptionPane.showConfirmDialog(Frame,"Assicurati di aver salvato, chiudere l'applicazione?","Database Fantacalcio",
                                JOptionPane.YES_NO_OPTION)==JOptionPane.YES_OPTION)
                                System.exit(0);};
    
     /**
     * Creates new form NewJFrame
     */
    public FormPrincipale() {
        initComponents();
        
        //questo è l'ask on close che abbiamo visto in classe
        
        this.addWindowListener(new java.awt.event.WindowAdapter() {
        @Override
        public void windowClosing(java.awt.event.WindowEvent windowEvent){
            askOnClose.run();
        }
        
        });
        
                
                
                }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuSalva = new javax.swing.JMenuItem();
        jMenuCarica = new javax.swing.JMenuItem();
        jMenuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuCreaSquadra = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Database Fantacalcio");
        setResizable(false);

        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);
        jList1.getAccessibleContext().setAccessibleName("");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Giocatore", "Ruolo", "Punteggio Giornata"
            }
        ));
        jTable1.setEnabled(false);
        jTable1.setFillsViewportHeight(true);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jTextArea2.setEditable(false);
        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("DialogInput", 0, 12)); // NOI18N
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(1);
        jTextArea2.setDisabledTextColor(new java.awt.Color(204, 0, 51));
        jTextArea2.setEnabled(false);
        jTextArea2.setMargin(new java.awt.Insets(3, 3, 0, 0));
        jScrollPane4.setViewportView(jTextArea2);

        jMenu1.setText("File");

        jMenuSalva.setText("Salva con nome...");
        jMenuSalva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSalvaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSalva);
        jMenuSalva.getAccessibleContext().setAccessibleName("jMenuSalva");

        jMenuCarica.setText("Carica database...");
        jMenuCarica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCaricaActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuCarica);
        jMenuCarica.getAccessibleContext().setAccessibleName("jMenuCarica");

        jMenuExit.setText("Esci");
        jMenuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuExit);
        jMenuExit.getAccessibleContext().setAccessibleName("jMenuExit");

        jMenuBar2.add(jMenu1);

        jMenu2.setText("Edit");

        jMenuCreaSquadra.setText("Crea nuova squadra...");
        jMenuCreaSquadra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuCreaSquadraActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuCreaSquadra);
        jMenuCreaSquadra.getAccessibleContext().setAccessibleName("jMenuCreaSquadra");

        jMenuBar2.add(jMenu2);

        setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
              
    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
          //prendo che squadra è stata cliccata in lista
          int index = jList1.getSelectedIndex();
          s = (String) jList1.getSelectedValue();
          if (index<0) {
            messaggioUtente("Seleziona una squadra o carica un database", Color.black);
            return;
        }
          if(DEBUG){System.out.println("Squadra selezionata: " + s);}
          caricaTabella(s);
              
        
    }//GEN-LAST:event_jList1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        //prendo che giocatore è stato cliccato
        int riga = jTable1.rowAtPoint(evt.getPoint());
        int colonna = jTable1.columnAtPoint(evt.getPoint());
        try {
        String valoreDelCampo = jTable1.getModel().getValueAt(riga, colonna)+"";
        if(DEBUG){System.out.print("valore della cella: "+valoreDelCampo);
        System.out.println(" | indice della riga cliccata: "+riga);}
        
        } catch (Exception e) {
            //if se si clicca sotto i giocatori, con tabella piena
            if(jTable1.getRowCount()>0){messaggioUtente("Seleziona un giocatore", Color.black);return;}
            else{
                //se si clicca sulla tabella vuota
            messaggioUtente("Seleziona una squadra o carica un database", Color.black);
            return;}
        }

        
        //apro la form di dettaglio sulla persona cliccata
        
        FormEdit f = new FormEdit(ArraySquadraSelez[riga], this, riga, s);
        f.setVisible(true);
        f.setLocationRelativeTo(this);
        this.setEnabled(false);
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jMenuSalvaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSalvaActionPerformed
        
        //istanzio file chooser 
        
        JFileChooser chooser = new JFileChooser();
        //int scelta 
        int choice = chooser.showSaveDialog(jMenuSalva);
        //se il file chooser ha ritornato qualcosa di diverso da un file approvato, chiudo la form
        if (choice != JFileChooser.APPROVE_OPTION) {messaggioUtente("Errore nella scelta del file", Color.red);return;}

        File chosenFile = chooser.getSelectedFile();
        
        //utilizzo serializable sul file appena scelto        
        try {
            FileOutputStream fileOut = new FileOutputStream(chosenFile);
            ObjectOutputStream out = new ObjectOutputStream(fileOut);
            out.writeObject(personeList);
            out.close();
            
        } catch (IOException e) {
            System.out.println("Eccezione nel salvare il file"+e.getMessage());
            messaggioUtente("Eccezione nel salvare il file"+e.getMessage() , Color.RED);
            setEnabled(true);
            this.dispose();
            return;
        }
        messaggioUtente("Il file: "+chosenFile+" è stato salvato correttamente", Color.BLACK);
                

    }//GEN-LAST:event_jMenuSalvaActionPerformed

    private void jMenuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuExitActionPerformed
        askOnClose.run();
    }//GEN-LAST:event_jMenuExitActionPerformed

    private void jMenuCaricaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCaricaActionPerformed
        //vedere jMenuSalvaActionPerformed per commenti su filechooser
        JFileChooser chooser = new JFileChooser();
        
        int choice = chooser.showOpenDialog(jMenuCarica);

        if (choice != JFileChooser.APPROVE_OPTION) return;

        File chosenFile = chooser.getSelectedFile();
        
        try {
            FileInputStream fileIn = new FileInputStream(chosenFile);
            ObjectInputStream in = new ObjectInputStream(fileIn);
            personeList = (List<Persona>)in.readObject();
            updateDb();
            caricaLista();
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Eccezione nel caricare il file "+e.getMessage());
            messaggioUtente("Eccezione nel caricare il file "+e.getMessage() , Color.RED);
            setEnabled(true);
            this.dispose();
            return;
        }
        
        messaggioUtente("Il file: "+chosenFile+" è stato caricato correttamente", Color.BLACK);
    }//GEN-LAST:event_jMenuCaricaActionPerformed

    private void jMenuCreaSquadraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuCreaSquadraActionPerformed
        FormNuovaSquadra f = new FormNuovaSquadra(this);
        f.setVisible(true);
        f.setLocationRelativeTo(this);
        f.setTitle("Crea nuova squadra");
        this.setEnabled(false);
    }//GEN-LAST:event_jMenuCreaSquadraActionPerformed
    
    //metodo per dare un messaggio all'utente in gui
    public void messaggioUtente(String str, Color c){
        jTextArea2.setText(str);
        jTextArea2.setDisabledTextColor(c);
    }
    
    //carico lista delle squadre da usare in form
    public void caricaLista(){
        DefaultListModel demoList =  new DefaultListModel();

        for (String string : squadre) {
            demoList.addElement(string);
        }
        jList1.setModel(demoList);

    }
    //carico lista giocatori in tabella ogni volta che viene cliccata una squadra in lista 
    public void caricaTabella(String s){
        //mi faccio dare il modello dei dati
        DefaultTableModel modello = (DefaultTableModel) jTable1.getModel();
        
        //ripulisco i dati presenti nel modello (serve per le volte successive alla prima)
        for (int i = modello.getRowCount() - 1; i >= 0; i--) {
            modello.removeRow(i);
        }
        //prendo la squadra dall'hashmap
        try {
            
        ArraySquadraSelez = dbPersone.get(s).toArray(new Persona[0]);
        
                //carico i dati
        int nCampiDavisualizzare = 3;
        String[] dati = new String[nCampiDavisualizzare];
        
        int punteggioTotale=0;
        for (int i = 0; i < ArraySquadraSelez.length; i++) {
            //inserisco la singola riga di dati
            dati[0] = ArraySquadraSelez[i].nomeCognome;
            dati[1] = ArraySquadraSelez[i].ruolo;
            
            //sommo tutti i punteggi per metterli all'allenatore
            //se è allenatore metto come punteggio il totale
            //se è giocatore metto il punteggio inividuale come gli altri dati
            punteggioTotale+=ArraySquadraSelez[i].punteggio;
            if (dati[1].equals("Allenatore")) {
                dati[2] = punteggioTotale+"";
            }else{dati[2] = ArraySquadraSelez[i].punteggio+"";}
            //mando i dati alla tabella
            modello.addRow(dati);
        }
        } catch (Exception e) {
            System.out.println("Nessun giocatore da aggiungere");
        }

        
    }
 
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipale.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipale().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuCarica;
    private javax.swing.JMenuItem jMenuCreaSquadra;
    private javax.swing.JMenuItem jMenuExit;
    private javax.swing.JMenuItem jMenuSalva;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    public javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables

}
